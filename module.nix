{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.lazyvim;
  
  # Load plugin data and mappings
  pluginData = pkgs.lazyvimPluginData or (builtins.fromJSON (builtins.readFile ./plugins.json));
  pluginMappings = pkgs.lazyvimPluginMappings or (import ./plugin-mappings.nix);
  pluginOverrides = pkgs.lazyvimOverrides or (import ./overrides/default.nix { inherit pkgs; });
  
  # Helper function to resolve plugin names
  resolvePluginName = lazyName:
    let
      mapping = pluginMappings.${lazyName} or null;
    in
      if mapping == null then
        # Try automatic resolution
        let
          parts = lib.splitString "/" lazyName;
          repoName = if length parts == 2 then elemAt parts 1 else lazyName;
          # Convert repo-name to repo_name and repo.nvim to repo-nvim
          nixName = lib.replaceStrings ["-" "."] ["_" "-"] repoName;
        in nixName
      else if builtins.isString mapping then
        mapping
      else
        mapping.package;
  
  # Build the list of vim plugins from nixpkgs
  resolvedPlugins = map (pluginSpec:
    let
      nixName = resolvePluginName pluginSpec.name;
      plugin = pkgs.vimPlugins.${nixName} or null;
    in
      if plugin == null then
        builtins.trace "Warning: Could not find plugin ${pluginSpec.name} (tried ${nixName})" null
      else
        plugin
  ) (pluginData.plugins or []);
  
  # Filter out null plugins
  availablePlugins = filter (p: p != null) resolvedPlugins;
  
  # Generate lazy.nvim configuration
  lazyConfig = ''
    -- LazyVim Nix Configuration
    -- This file is auto-generated by the lazyvim-nix flake
    
    local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
    if not vim.loop.fs_stat(lazypath) then
      vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "https://github.com/folke/lazy.nvim.git",
        "--branch=stable",
        lazypath,
      })
    end
    vim.opt.rtp:prepend(lazypath)
    
    -- Configure lazy.nvim to use pre-fetched plugins
    require("lazy").setup({
      defaults = { lazy = true },
      dev = {
        path = "${pkgs.symlinkJoin { name = "lazyvim-plugins"; paths = availablePlugins; }}/share/vim-plugins",
        patterns = { "" },
        fallback = false,
      },
      spec = {
        { "LazyVim/LazyVim", import = "lazyvim.plugins", dev = true },
        -- Disable Mason.nvim in Nix environment
        { "williamboman/mason.nvim", enabled = false },
        { "williamboman/mason-lspconfig.nvim", enabled = false },
        { "jay-babu/mason-nvim-dap.nvim", enabled = false },
        -- Disable treesitter auto-install
        { 
          "nvim-treesitter/nvim-treesitter", 
          opts = { 
            ensure_installed = {},
            auto_install = false,
          },
          dev = true,
        },
        -- User plugins
        { import = "plugins" },
      },
      performance = {
        rtp = {
          disabled_plugins = {
            "gzip",
            "matchit",
            "matchparen",
            "netrwPlugin",
            "tarPlugin",
            "tohtml",
            "tutor",
            "zipPlugin",
          },
        },
      },
    })
    
    -- Apply user settings
    ${optionalString (cfg.settings != {}) ''
      -- User settings
      ${if cfg.settings ? colorscheme then "vim.cmd.colorscheme('${cfg.settings.colorscheme}')" else ""}
      ${optionalString (cfg.settings ? options) (
        concatStringsSep "\n" (mapAttrsToList (name: value: 
          "vim.opt.${name} = ${if isBool value then (if value then "true" else "false") else toString value}"
        ) cfg.settings.options)
      )}
    ''}
  '';
  
  # Treesitter configuration
  treesitterGrammars = pkgs.symlinkJoin {
    name = "treesitter-grammars";
    paths = map (name: pkgs.vimPlugins.nvim-treesitter.grammarPlugins.${name} or 
      (builtins.trace "Warning: Treesitter parser '${name}' not found" null)
    ) cfg.treesitterParsers;
  };

in {
  options.programs.lazyvim = {
    enable = mkEnableOption "LazyVim - A Neovim configuration framework";
    
    extraPackages = mkOption {
      type = types.listOf types.package;
      default = [];
      example = literalExpression ''
        with pkgs; [
          rust-analyzer
          gopls
          nodePackages.typescript-language-server
        ]
      '';
      description = ''
        Additional packages to be made available to LazyVim.
        This should include LSP servers, formatters, linters, and other tools.
      '';
    };
    
    treesitterParsers = mkOption {
      type = types.listOf types.str;
      default = [ "lua" "vim" "vimdoc" "query" "markdown" "markdown_inline" ];
      example = [ "rust" "go" "typescript" "tsx" "python" ];
      description = ''
        List of Treesitter parsers to install.
        Parser names should match those available in nixpkgs.
      '';
    };
    
    settings = mkOption {
      type = types.submodule {
        options = {
          colorscheme = mkOption {
            type = types.nullOr types.str;
            default = null;
            example = "catppuccin";
            description = "The colorscheme to use";
          };
          
          options = mkOption {
            type = types.attrsOf types.anything;
            default = {};
            example = {
              relativenumber = false;
              tabstop = 2;
              shiftwidth = 2;
            };
            description = "Vim options to set";
          };
        };
      };
      default = {};
      description = "LazyVim settings";
    };
    
    extraPlugins = mkOption {
      type = types.listOf types.attrs;
      default = [];
      example = literalExpression ''
        [
          {
            name = "github/copilot.vim";
            lazy = false;
          }
        ]
      '';
      description = ''
        Additional plugin specifications for lazy.nvim.
        These will be added to the spec after LazyVim's default plugins.
      '';
    };
  };
  
  config = mkIf cfg.enable {
    # Ensure neovim is enabled
    programs.neovim = {
      enable = true;
      package = pkgs.neovim-unwrapped;
      
      viAlias = true;
      vimAlias = true;
      vimdiffAlias = true;
      
      withNodeJs = true;
      withPython3 = true;
      withRuby = false;
      
      # Add all required packages
      extraPackages = cfg.extraPackages ++ (with pkgs; [
        # Required by LazyVim
        git
        ripgrep
        fd
        
        # Language servers and tools can be added by the user
      ]);
      
      # Don't use the built-in plugin management
      configure = {
        packages.myVimPackage = {
          start = [ pkgs.vimPlugins.lazy-nvim ];
        };
      };
    };
    
    # Create LazyVim configuration
    xdg.configFile = {
      "nvim/init.lua".text = lazyConfig;
      
      # Link treesitter parsers
      "nvim/parser".source = "${treesitterGrammars}/parser";
      
      # Create queries directory for treesitter
      "nvim/queries" = {
        source = pkgs.symlinkJoin {
          name = "treesitter-queries";
          paths = map (grammar: "${grammar}/queries") 
            (filter (g: g != null) 
              (map (name: pkgs.vimPlugins.nvim-treesitter.grammarPlugins.${name} or null) 
                cfg.treesitterParsers));
        };
        recursive = true;
      };
      
      # Add extra plugin configurations if provided
      "nvim/lua/plugins/nix-extra.lua" = mkIf (cfg.extraPlugins != []) {
        text = ''
          -- Extra plugins configured via Nix
          return ${builtins.toJSON cfg.extraPlugins}
        '';
      };
    };
    
    # Set up environment
    home.sessionVariables = {
      EDITOR = "nvim";
    };
  };
}